parameters:
  - name: appInsight
    displayName: Azure Application Insight name
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: appServicePlanRG
    displayName: App Service Plan Resource Group
    type: string

  - name: azureSubscription
    displayName: Azure Subscription
    type: string

  - name: bots
    displayName: Bots
    type: object

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: connectionName
    displayName: Connection Name
    type: string

  - name: dependsOn
    displayName: Depends On
    type: string

  - name: keyVault
    displayName: Key Vault
    type: string

  - name: resourceGroup
    displayName: Resource Group
    type: string

  - name: resourceSuffix
    displayName: Resource Suffix
    type: string

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ parameters.dependsOn }}"
    jobs:
      - job: "Deploy"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Prepare .env file, deleting all the declared skills, so it uses only the settings define in Azure
          - ${{ if eq(bot.type, 'Host') }}:
            - task: PowerShell@2
              displayName: 'Prepare .env file'
              inputs:
                targetType: inline
                workingDirectory: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
                failOnStderr: true
                script: |
                  $file = "./.env"
                  $content = Get-Content $file
                  $content | ForEach-Object {
                    $line = $_
                    if ($line.Trim().Length -gt 0 -and -not $line.Trim().ToLower().StartsWith('skill_')) {
                      $line
                    }
                  } | Set-Content $file;

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"

          # Tag BotBuilder version
          - template: ../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                botName: "${{ bot.name }}"
              ${{ if ne(bot.displayName, '') }}:
                botName: "${{ bot.displayName }}"
              version: "$(DependenciesVersionNumber)"

          # Set BotBuilder source and version
          - task: PowerShell@2
            displayName: 'Set BotBuilder source and version'
            inputs:
              targetType: inline
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
              failOnStderr: true
              script: |
                $registry = "$(DependenciesSource)";
                $version = "$(DependenciesVersionNumber)";
                $packagejsonPath = "./package.json";

                $packagejson = Get-Content $packagejsonPath | ConvertFrom-Json
                $dependencies = @{}

                $packagejson.dependencies.psobject.properties | ForEach-Object {
                  $dependencies[$_.Name] = if ($_.Name -match "botbuilder*") { $version } else { $_.Value }
                }

                $packagejson.dependencies = $dependencies
                
                Set-Content $packagejsonPath -Value ($packagejson | ConvertTo-Json)

                Write-Host "Updated BotBuilder packages version:";
                $dependencies

                Write-Host "`nUsing the registry source: $registry";
                New-Item -Path . -Name ".npmrc" -ItemType "file" -Value "registry=$registry";

          # Install Packages
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
              customRegistries: 'useNpmrc'
              verbose: true

          # Prepate bot
          - task: AzureCLI@2
            displayName: 'Prepare Bot'
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: 'az bot prepare-deploy --code-dir "${{ bot.project.directory }}" --lang Javascript'

          # Zip bot
          - task: ArchiveFiles@2
            displayName: 'Zip bot'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip'
              replaceExistingArchive: true
              verbose: true

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: 'Publish zip package'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip'
              artifactName: javascript-$(Build.BuildId)

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(AppId)
              appInsight: "${{ parameters.appInsight }}"
              appSecret:  $(AppSecret)
              appServicePlan: "${{ parameters.appServicePlan }}"
              appServicePlanRG: "${{ parameters.appServicePlanRG }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              templateFile: "build/templates/template-bot-resources.json"

          # Deploy bot
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : ${{ bot.name }}-$(Build.BuildId)'
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              appName: '${{ bot.name }}${{ parameters.resourceSuffix }}-$(Build.BuildId)'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              package: '$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip'
              deploymentMethod: runFromPackage

          # Configure OAuth
          - ${{ if eq(bot.type, 'Skill') }}:
            - template: ../common/configureOAuth.yml
              parameters:
                appId: $(AppId)
                appSecret:  $(AppSecret)
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                connectionName: "${{ parameters.connectionName }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"

parameters:
  dependsOn: ""
  resourceGroup: ""
  bots: []
  botPricingTier: ""
  resourceSuffix: ""
  appServicePlan: ""
  appServicePlanRG: ""
  connectionName: ""
  keyVault: ""

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ parameters.dependsOn }}"
    jobs:
      - job: "Deploy"
        pool:
          vmImage: "ubuntu-latest"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Prepare .env file, deleting all the declared skills, so it uses only the settings define in Azure
          - ${{ if eq(bot.type, 'Host') }}:
              - task: PowerShell@2
                displayName: "Prepare .env file"
                inputs:
                  targetType: inline
                  script: |
                    $file = "${{ bot.project.directory }}/.env"
                    $content = Get-Content $file
                    $content | ForEach-Object {
                      $line = $_
                      if ($line.Trim().Length -gt 0 -and -not $line.Trim().ToLower().StartsWith("skill_")) {
                        $line
                      }
                    } | Set-Content $file

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"
              botType: "${{ bot.type }}"
              project: "${{ bot.project }}"

          # Tag BotBuilder package version
          - template: ../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                botName: "${{ bot.name }}"
              ${{ if ne(bot.displayName, '') }}:
                botName: "${{ bot.displayName }}"
              version: "$(DependenciesVersionNumber)"

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(AppId)
              appSecret:  $(AppSecret)
              botName: "${{ bot.name }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              appServicePlan: "${{ parameters.appServicePlan }}"
              appServicePlanRG: "${{ parameters.appServicePlanRG }}"
              templateFile: "build/templates/template-python-bot-resources.json"

          # Configure OAuth
          - ${{ if eq(bot.type, 'Skill') }}:
            - template: ../common/configureOAuth.yml
              parameters:
                appId: $(AppId)
                appSecret:  $(AppSecret)
                botName: "${{ bot.name }}"
                botGroup: "${{ parameters.resourceGroup }}"
                connectionName: "${{ parameters.connectionName }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Set Python version
          - task: UsePythonVersion@0
            displayName: "Set python version to 3.8.x"
            inputs:
              versionSpec: "3.8.x"

          # Build Python app (linux only)
          - script: |
                python -m venv antenv
                source antenv/bin/activate
                python -m pip install --upgrade pip
                pip install -r requirements.txt
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ bot.project.directory }}
            displayName: "Build Python app"

          # Zip bot
          - task: ArchiveFiles@2
            displayName: "Zip bot"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/${{ bot.project.directory }}"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip"
              replaceExistingArchive: true
              verbose: true

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: "Publish zip package"
            inputs:
              pathToPublish: "$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip"
              artifactName: python-$(Build.BuildId)
            
          # Deploy bot
          - task: AzureWebApp@1
            displayName: "Deploy Azure Web App : ${{ bot.name }}-$(Build.BuildId)"
            inputs:
              azureSubscription: $(AzureSubscription)
              appName: "${{ bot.name }}${{ parameters.resourceSuffix }}-$(Build.BuildId)"
              appType: webAppLinux
              resourceGroupName: "${{ parameters.resourceGroup }}"
              package: "$(System.DefaultWorkingDirectory)/build/${{ bot.name }}.zip"
              deploymentMethod: runFromPackage

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                botName: "${{ bot.name }}"
                botGroup: "${{ parameters.resourceGroup }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
